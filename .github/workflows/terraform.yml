name: "Terraform Deployment"
on: 
  workflow_dispatch:
    inputs:
      environment:
        description: 'Define environment name'     
        required: true
        options: 
        - dev
        - cert
        default: 'cert'

defaults:
  run:
    shell: bash

env:
  STAGE: "${{ github.event.inputs.environment }}"
  REQUIREMENTS_PATH: "configs/requirements.txt"
  PLUGINS_PATH: "configs/plugins"

permissions:
  id-token: write
  contents: read # This is required for actions/checkout@v2
  
jobs:
  python_plugins:
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v1
    - run: echo "ARTIFACT_PATH=${{env.STAGE}}/configs/plugins.zip" >> $GITHUB_ENV
    - name: Zip plugins
      run: |
       cd ${{env.STAGE}}/${{env.PLUGINS_PATH}} && zip -r plugins.zip *
       mv $ARTIFACT_PATH ${{env.STAGE}}/configs

    - uses: actions/upload-artifact@v3
      with:
        name: plugins-artifact
        path: $ARTIFACT_PATH
        retention-days: 1

  terraform:
    name:   "terraform"
    runs-on: ubuntu-latest
    needs: python_plugins

    steps:
      - uses: actions/download-artifact@master
        with:
          name: plugins-artifact
          path: $ARTIFACT_PATH
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: $ARTIFACT_PATH

      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        # Only runs if all of the files exists
        run: |
         echo plugin exists: $ARTIFACT_PATH
         pwd && ls

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::053342002484:role/github-oidc
          aws-region: us-east-1

      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.1
          terraform_wrapper: false
      - name: Terraform Init
        id: init
        run: |
          rm -rf .terraform
          terraform init -backend-config=backend.tfvars -upgrade=true -no-color
        working-directory: "${{env.STAGE}}"
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color
        working-directory:  "${{env.STAGE}}"
        continue-on-error: true
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        id: apply
        run: terraform apply -auto-approve -input=false
        working-directory:  "${{env.STAGE}}"